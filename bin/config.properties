#
# Grammar
#

## Jeżeli inicjalna gramatyka zawiera zduplikowane reguły, ustawienie false
## spowoduje zgłoszenie błędu, natomiast true - kontynuację wykonania.
## Obowiązująca będzie wówczas ostatnia definicja reguły.
grammar.skipDuplicates=true

## Jeżeli reguła nie posiada nadanego prawdopodobieństwa inicjalnego,
## zostanie ono ustawione automatycznie. W przypadku ustawienia true
## prawdopodobieństwa zostaną wylosowane, w innym wypadku reguły otrzymają
## prawdopodobieńśtwo 1.
##
## Zarówno prawdopodobieństwa nadane ręcznie, jak i automatycznie
## są normalizowane na początku procesu.
grammar.randomProbabilities=true

## Jeżeli nie podano inicjalnej gramatyki zostanie ona wygenerowana losowo
## na podstawie wprowadzonego zbioru danych. Symbole i reguły terminalne będą
## odpowiadały symbolom znalezionym w zbiorze danych, ale ich liczba nie będzie
## większa niż podana w parametrze grammar.maxRandomTerminals (zostaną wylosowane
## spośród dostępnych). Reguły nieterminalne będą stanowiły wariacje utworzone
## z symboli nieterminalnych reguł terminalnych oraz symbolu startowego '$'.
## Ich liczba będzie równa wartości parametru grammar.randomNonTerminals. Jeśli
## możliwych wariacji symbolu będzie zbyt mało program zakończy się błędem.
grammar.maxRandomTerminals=10
grammar.randomNonTerminals=4

## Format wyjściowy i wejściowy gramatyki. Szczegóły opisano w sekcji "Gramatyka".
## SIMPLE - jednoznakowe symbole; białe znaki ignorowane
## EXTENDED - wieloznakowe symbole oddzielane spacją
grammar.format=SIMPLE

grammar.maxRules=20

#
# CYK
#

## Liczba wątków, które mają zostać użyte do wyliczania CYK
cyk.numOfThreads=6

## Bazowy próg poprawności zdania - jest skalowany wg długości zdania
cyk.parsingThreshold=0.0

## Wlacza i wylacza covering
cyk.coveringEnabled=true

## Jeśli parametr ten ustawiony jest na "true", to zdanie uznaje się za sparsowane, jeśli w startowej komórce macierzy
## CYK znajduje się reguła z symbolem startowym po lewej stronie i jej prawdopodobieństwo jest większe od progu parsowania.
## Jeśli parametr ustawiony jest na "false", to zdanie uznaje się za sparsowane, niezależnie od prawdopodobieństwa
## reguły.
cyk.probabilityBasedParsingEvaluation=false

#
# Contrastive Estimation
#

## Maksymalny rozmiar sąsiedztwa
ce.maxNeighbourhoodSize=10

## Jeżeli true, sąsiedzi będą losowani spośród potencjalnych sąsiadów,
## jeśli ich liczba przekracza maksymalny rozmiar sąsiedztwa (wariant
## zalecany). W innym wypadku zostaną zawsze wybrane pierwsze elementy
## z listy potencjalnych sąsiadów (np. zawsze pierwsze 10 elementów).
ce.randomNeighbours=true

## Jeżeli true, wykonywanie indukcji dla danego zbioru danych zakończy
## się błędem, w wypadku gdy nie zostaną znalezieni żadni sąsiedzi
## dla żadnego zdania w zbiorze dla odmiany algorytmu innej niż IO.
ce.requireNeighbours=true

## Maksymalna liczba iteracji w jednym powtórzeniu
ce.iterations=10

## Współczynnik, przez który zostaje przemnożona wartość zmiany
## prawdopodobieństwa reguły, 1 oznacza przyjęcie wartości
## obliczonej przez algorytm (wariant zalecany).
ce.velocityFactor=0.25

## Odmiana algorytmu
## IO - algorytm InsideOutside
## CE_ALL - algorytm CE z sąsiedztwem wszystkich zdań negatywnych,
## CE_SAME_LENGTH - algorytm CE z sąsiedztwem zdań negatywnych podobnej długości
## CE_LEVENSHTEIN - algorytm CE z sąsiedztwem zdań o odległości Levenshteina (na poziomie wyrazów)
## nie wyższej niż podany distanceLimit
## CE_DAMERAU - algorytm CE z sąsiedztwem zdań o odległości Damerau-Levenshteina (na poziomie wyrazów)
## nie wyższej niż podany distanceLimit
## CE_JACCARD - algorytm CE z sąsiedztwem zdań o odległości Jaccarda (na poziomie wyrazów)
## nie wyższej niż podany distanceLimit
ce.mode=CE_DAMERAU
ce.distanceLimit=5

## Jeżeli true, wartości inside zostaną obliczone w ramach algorytmu CYK (wariant polecany)
ce.calculateInsidesInCyk=false

## Tryb obliczania wartości outside.
## SEQUENTIAL - sekwencyjny (polecany)
## CELL_CONCURRENT - współbieżny - lista priorytetowa komórek
## CELL_RULE_CONCURRENT - współbieżny - priorytetyzacja CellRules w wierszach
## Tryby współbieżne wymagają podania liczby wątków
ce.outsideMode=SEQUENTIAL
ce.numOfThreads=6

#
# Evaluation
#

## Liczba iteracji pomiędzy ewaluacjami. W przypadku wartości 0,
## ewaluacja zostanie przeprowadzona jedynie na końcu każdego wykonania.
ev.step=10

## Maksymalizowana funkcja. Algorytm zwróci na koniec gramatykę o najwyższej
## wartości podanego parametru spośród ewaluowanych (zgodnie z parametrem ev.step).
## SPECIFICITY, SENSITIVITY, PRECISION, F1
ev.maximizationTarget=F1

#
# Stop Condition
#
## Konfiguracja warunków stopu algorytmu. Warunki stopu są sprawdzane przy okazji
## ewaluacji, a więc zgodnie z parameterm ev.step. Dostępne są dwa warunki opisane
## poniżej. W przypadku obecności obu, wystarczy wsytąpienie jednego do zatrzymania
## algorytmu. Warunek można wyłączyć przez zakomentowanie jego zmiennych konfiguracyjnych.
## W przypadku błędnej konfiguracji warunek jest ignorowany - należy sprawdzić, czy na
## początku działania aplikacji warunki zostały poprawnie zainicjalizowane.

## Algorytm zostanie zatrzymany, jeśli parametry przekroczą podane wartości,
## wszystkie parametry muszą być podane.
sc.expectedSensitvity=1
sc.expectedSpecificity=1
## Określa liczbę iteracji pętli indukcji, po której algorytm zostanie zatrzymany nawet jeśli nie uda się spełnić warunków
## stopu.
sc.iterations=30

## Algorytm zostanie zatrzymany, jeżeli wartość parametru podanego jako ev.maximizationTarget
## zmniejszy się o podaną wartość w podanej liczbie ostatnich ewaluacji. Tzn. jeśli
## ev.step wynosi 10, a sc.mtDecreaseInSteps 5, to będzie sprawdzana różnica w 50 ostatnich
## iteracjach. Oba parametry muszą być podane.
##sc.expectedMtDecrease=0.1
##sc.mtDecreaseInSteps=5

#
# Heuristic
#
# GA, SPLIT_MERGE
heuristic.algorithm=GA
## Prawdopodobieństwo z jakim zostanie uruchomiony algorytm genetyczny, jeśli został wybrany.
heuristic.ga.runProbability=1
## Maksymalny rozmiar populacji, z której dwa najlepiej przystosowane osobniki zostaną poddane działaniu operatorów genetycznych.
## Jeśli wartość tego parametru jest większa niż liczba reguł nieterminalnych w gramatyce, to zostanie ona odpowiednio zmniejszona.
heuristic.ga.populationSize=4
## Liczba nowych reguł jaka ma zostać dodana w wyniku działania algorytmu genetycznego. Musi być liczbą parzystą, gdyż ga dodaje
## reguły parami.
heuristic.ga.numOfNewRules=2
## Prawdopodobieństwo z jakim symbol reguły zostanie podmieniony. Losowanie przeprowadzane jest dla każdego symbolu w regule.
heuristic.ga.symbolMutationProbability=0.7
## Prawdopodobieństwo przeprowadzenia operacji inwersji. Sprawdzane dla każdej reguły osobno.
heuristic.ga.inversionProbability=0
heuristic.ga.crossoverProbability=0.7

#
# Covering
#
## AGGRESSIVE, PROGRESSIVE
covering.operator=PROGRESSIVE

#
# Fitness
#
fitness.positiveWeight=1.0
fitness.negativeWeight=1.0